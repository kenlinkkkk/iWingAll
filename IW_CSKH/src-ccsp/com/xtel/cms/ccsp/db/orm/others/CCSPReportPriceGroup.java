package com.xtel.cms.ccsp.db.orm.others;

import java.io.Serializable;
import com.ligerdev.appbase.utils.db.AntTable;
import com.ligerdev.appbase.utils.db.AntColumn;


/*
	- 28/05/2019 18:28:35: Generated by sql
	select DATE_FORMAT(STR_TO_DATE(hisnote3, '%Y%m%d'), '%Y-%m-%d') date_report, pkg_code, count(fee) count, sum(fee) fee from his_201905 where result = 0 group by date_report, pkg_code order by date_report desc
*/
@AntTable(catalog="", name="CCSPReportPKG", label="CCSPReportPKG", key="")
public class CCSPReportPriceGroup implements Serializable, Cloneable {

	private String dateReport;
	private int priceGroup;
	private int count;
	private String fee;
	
	public CCSPReportPriceGroup(){
	}
	
	public CCSPReportPriceGroup(String dateReport, int priceGroup, int count, String fee){
		this.dateReport = dateReport;
		this.priceGroup = priceGroup;
		this.count = count;
		this.fee = fee;
	}
	
	@AntColumn(name="date_report", size=10, label="date_report")
	public void setDateReport(String dateReport){
		this.dateReport = dateReport;
	}
	
	@AntColumn(name="date_report", size=10, label="date_report")
	public String getDateReport(){
		return this.dateReport;
	} 
	
	@AntColumn(name="count", size=21, label="count")
	public void setCount(int count){
		this.count = count;
	}
	
	@AntColumn(name="count", size=21, label="count")
	public int getCount(){
		return this.count;
	}
	
	@AntColumn(name="fee", size=33, label="fee")
	public void setFee(String fee){
		this.fee = fee;
	}
	
	@AntColumn(name="fee", size=33, label="fee")
	public String getFee(){
		return this.fee;
	}
	
	@AntColumn(name="price_group", size=33, label="price_group")
	public int getPriceGroup() {
		return priceGroup;
	}

	@AntColumn(name="price_group", size=33, label="price_group")
	public void setPriceGroup(int priceGroup) {
		this.priceGroup = priceGroup; 
	} 
	
	@Override
	public String toString() {
		return "["
			+ "dateReport=" + dateReport
			+ ", priceGroup=" + priceGroup
			+ ", count=" + count
			+ ", fee=" + fee
			+ "]";  
	}
	
	@Override
	public Object clone() throws CloneNotSupportedException {
		return super.clone();
	}
}